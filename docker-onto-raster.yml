version: "3.8"

services:
  rasdaman:
    build:
      context: rasdaman
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://host.docker.internal:8080/rasdaman/ows" ] # TODO: check if this is the correct endpoint or "http://localhost:8080/rasdaman/ows"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - rasdaman
    extra_hosts:
      - "host.docker.internal:host-gateway"
  #TODO: complete Dockerfile
  #TODO: ports, environment etc.

  db:
    #image: postgres
    build:
      context: db_pgsql
    restart: unless-stopped
    ports:
      - "${MAPPED_POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=postgres
      - PGUSER=postgres
      - POSTGRES_PASSWORD=postgres2024
    depends_on:
      rasdaman:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rasdaman
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ontop:
    image: ontop/ontop:5.1.2
    env_file: .env
    restart: unless-stopped
    environment:
      ONTOP_ONTOLOGY_FILE: /opt/ontop/input/OntoRaster.owx
      ONTOP_XML_CATALOG_FILE: /opt/ontop/input/catalog-v001.xml
      ONTOP_MAPPING_FILE: /opt/ontop/input/OntoRaster.obda
      ONTOP_PROPERTIES_FILE: /opt/ontop/input/OntoRaster.properties
      #ONTOP_PORTAL_FILE: /opt/ontop/input/dest.portal.toml
      ONTOP_CORS_ALLOWED_ORIGINS: "*"
      ONTOP_DEV_MODE: "true"
    volumes:
      - ./vkg:/opt/ontop/input
      - ./jdbc:/opt/ontop/jdbc
      #- ./wait-for-it:/opt/wait-for-it
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${SERVER_PORT}:8080"
    networks:
      - rasdaman
    extra_hosts:
      - "host.docker.internal:host-gateway"


networks:
  rasdaman:
    name: rasdaman

